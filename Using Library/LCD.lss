
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000256  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000256  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009b  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000485  00000000  00000000  0000038f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000179  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000335  00000000  00000000  0000098d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000139  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000158  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000ff5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  7a:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CheckBusy>:
//############################################################################################################################################################


void CheckBusy()
{
	DDR_LCD= 0x00;								//Set Data Direction for LCD to Input
  82:	17 ba       	out	0x17, r1	; 23
	LCD_Control_PORT|= 1<<RW;					//Set LCD to Read Mode; R/w pin High
  84:	da 9a       	sbi	0x1b, 2	; 27
	LCD_Control_PORT&= ~1<<RS;					//Set LCD to Read Commands; RS pin Low
  86:	8b b3       	in	r24, 0x1b	; 27
  88:	8c 7f       	andi	r24, 0xFC	; 252
  8a:	8b bb       	out	0x1b, r24	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	22 ee       	ldi	r18, 0xE2	; 226
  8e:	34 e0       	ldi	r19, 0x04	; 4
  90:	07 c0       	rjmp	.+14     	; 0xa0 <CheckBusy+0x1e>
	DDR_LCD= 0xFF; 								//Set Data Direction for LCD to Output, for further operations
}

void FlashLCD()
{
	LCD_Control_PORT|= 1<<Enable;				//Enable Pin High
  92:	db 9a       	sbi	0x1b, 3	; 27
  94:	c9 01       	movw	r24, r18
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <CheckBusy+0x14>
	_delay_ms(5);
	LCD_Control_PORT&= ~1<<Enable;				//Enable Pin Low
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	8b bb       	out	0x1b, r24	; 27
{
	DDR_LCD= 0x00;								//Set Data Direction for LCD to Input
	LCD_Control_PORT|= 1<<RW;					//Set LCD to Read Mode; R/w pin High
	LCD_Control_PORT&= ~1<<RS;					//Set LCD to Read Commands; RS pin Low

	while (LCD_PORT >= 0x80)					//Condition Checking; if LCD sends back a value < 80 then it is busy
  a0:	c7 99       	sbic	0x18, 7	; 24
  a2:	f7 cf       	rjmp	.-18     	; 0x92 <CheckBusy+0x10>
	{
		FlashLCD();
	}

	DDR_LCD= 0xFF; 								//Set Data Direction for LCD to Output, for further operations
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	87 bb       	out	0x17, r24	; 23
}
  a8:	08 95       	ret

000000aa <FlashLCD>:

void FlashLCD()
{
	LCD_Control_PORT|= 1<<Enable;				//Enable Pin High
  aa:	db 9a       	sbi	0x1b, 3	; 27
  ac:	82 ee       	ldi	r24, 0xE2	; 226
  ae:	94 e0       	ldi	r25, 0x04	; 4
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <FlashLCD+0x6>
	_delay_ms(5);
	LCD_Control_PORT&= ~1<<Enable;				//Enable Pin Low
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	8b bb       	out	0x1b, r24	; 27
}
  ba:	08 95       	ret

000000bc <SendCmd>:

void SendCmd(unsigned char cmd)
{
  bc:	1f 93       	push	r17
  be:	18 2f       	mov	r17, r24
	CheckBusy();
  c0:	0e 94 41 00 	call	0x82	; 0x82 <CheckBusy>
	LCD_PORT = cmd;
  c4:	18 bb       	out	0x18, r17	; 24
	LCD_Control_PORT&= ~ ((1<<RW)|(1<<RS));	//write mode; command mode
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	89 7f       	andi	r24, 0xF9	; 249
  ca:	8b bb       	out	0x1b, r24	; 27
	DDR_LCD= 0xFF; 								//Set Data Direction for LCD to Output, for further operations
}

void FlashLCD()
{
	LCD_Control_PORT|= 1<<Enable;				//Enable Pin High
  cc:	db 9a       	sbi	0x1b, 3	; 27
  ce:	82 ee       	ldi	r24, 0xE2	; 226
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <SendCmd+0x16>
	_delay_ms(5);
	LCD_Control_PORT&= ~1<<Enable;				//Enable Pin Low
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	8b bb       	out	0x1b, r24	; 27
{
	CheckBusy();
	LCD_PORT = cmd;
	LCD_Control_PORT&= ~ ((1<<RW)|(1<<RS));	//write mode; command mode
	FlashLCD();
	LCD_PORT = 0x00;
  dc:	18 ba       	out	0x18, r1	; 24
}
  de:	1f 91       	pop	r17
  e0:	08 95       	ret

000000e2 <SendChar>:

void SendChar(unsigned char character)
{
  e2:	1f 93       	push	r17
  e4:	18 2f       	mov	r17, r24
	CheckBusy();
  e6:	0e 94 41 00 	call	0x82	; 0x82 <CheckBusy>
	LCD_PORT = character;
  ea:	18 bb       	out	0x18, r17	; 24
	LCD_Control_PORT&= ~ (1<<RW);
  ec:	da 98       	cbi	0x1b, 2	; 27
	LCD_Control_PORT|= 1<<RS;
  ee:	d9 9a       	sbi	0x1b, 1	; 27
	DDR_LCD= 0xFF; 								//Set Data Direction for LCD to Output, for further operations
}

void FlashLCD()
{
	LCD_Control_PORT|= 1<<Enable;				//Enable Pin High
  f0:	db 9a       	sbi	0x1b, 3	; 27
  f2:	82 ee       	ldi	r24, 0xE2	; 226
  f4:	94 e0       	ldi	r25, 0x04	; 4
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <SendChar+0x14>
	_delay_ms(5);
	LCD_Control_PORT&= ~1<<Enable;				//Enable Pin Low
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	8b bb       	out	0x1b, r24	; 27
	CheckBusy();
	LCD_PORT = character;
	LCD_Control_PORT&= ~ (1<<RW);
	LCD_Control_PORT|= 1<<RS;
	FlashLCD();
	LCD_PORT = 0x00;
 100:	18 ba       	out	0x18, r1	; 24
}
 102:	1f 91       	pop	r17
 104:	08 95       	ret

00000106 <SendString>:

void SendString(char *str)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	ec 01       	movw	r28, r24
 10c:	03 c0       	rjmp	.+6      	; 0x114 <SendString+0xe>
	while(*str > 0)
	{
		SendChar(*str++);
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	0e 94 71 00 	call	0xe2	; 0xe2 <SendChar>
	LCD_PORT = 0x00;
}

void SendString(char *str)
{
	while(*str > 0)
 114:	88 81       	ld	r24, Y
 116:	88 23       	and	r24, r24
 118:	d1 f7       	brne	.-12     	; 0x10e <SendString+0x8>
	{
		SendChar(*str++);
	}
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <CursorPos>:
}


void CursorPos(uint8_t y, uint8_t x)
{
	SendCmd(0x80 + ColumnPosition[y-1] + (x-1));
 120:	61 58       	subi	r22, 0x81	; 129
 122:	e7 e6       	ldi	r30, 0x67	; 103
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	e8 0f       	add	r30, r24
 128:	f1 1d       	adc	r31, r1
 12a:	80 81       	ld	r24, Z
 12c:	86 0f       	add	r24, r22
 12e:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCmd>
}
 132:	08 95       	ret

00000134 <InitLCD>:

void InitLCD()
{
 134:	1f 93       	push	r17
	DDR_Control_PORT |= 1<<Enable | 1<<RW | 1<<RS;
 136:	8a b3       	in	r24, 0x1a	; 26
 138:	8e 60       	ori	r24, 0x0E	; 14
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	84 ed       	ldi	r24, 0xD4	; 212
 13e:	90 e3       	ldi	r25, 0x30	; 48
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <InitLCD+0xc>
	_delay_ms(50);

	SendCmd(0x01); 								//Clear Screen 0x01 = 00000001
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCmd>
 14a:	84 ef       	ldi	r24, 0xF4	; 244
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <InitLCD+0x1a>
	_delay_ms(2);
	SendCmd(0x38);								//Selecting 8- bit Mode
 152:	88 e3       	ldi	r24, 0x38	; 56
 154:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCmd>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 158:	10 e1       	ldi	r17, 0x10	; 16
 15a:	81 2f       	mov	r24, r17
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <InitLCD+0x28>
	_delay_us(50);
	SendCmd(0b00001110);						//Set attributes on 1st three bits: {Display-ON/OF, Cursor-ON/OFF, Cursor-Blink-ON/OFF}
 160:	8e e0       	ldi	r24, 0x0E	; 14
 162:	0e 94 5e 00 	call	0xbc	; 0xbc <SendCmd>
 166:	1a 95       	dec	r17
 168:	f1 f7       	brne	.-4      	; 0x166 <InitLCD+0x32>
	_delay_us(50);
}
 16a:	1f 91       	pop	r17
 16c:	08 95       	ret

0000016e <main>:
#include<util/delay.h>
#include<CLib/LCD.h>

int main(void)
{
	InitLCD();
 16e:	0e 94 9a 00 	call	0x134	; 0x134 <InitLCD>


	while(1)
	{
		SendString("Testing");
 172:	80 e6       	ldi	r24, 0x60	; 96
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 83 00 	call	0x106	; 0x106 <SendString>
		CursorPos(1,1);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	0e 94 90 00 	call	0x120	; 0x120 <CursorPos>
 182:	f7 cf       	rjmp	.-18     	; 0x172 <main+0x4>

00000184 <SendInteger>:
		SendChar(*str++);
	}
}

void SendInteger(int Int)
{
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	60 97       	sbiw	r28, 0x10	; 16
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
	char ch[16];
	itoa(Int,ch,10);
 19c:	8e 01       	movw	r16, r28
 19e:	0f 5f       	subi	r16, 0xFF	; 255
 1a0:	1f 4f       	sbci	r17, 0xFF	; 255
 1a2:	b8 01       	movw	r22, r16
 1a4:	4a e0       	ldi	r20, 0x0A	; 10
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <itoa>
	SendString(ch);
 1ac:	c8 01       	movw	r24, r16
 1ae:	0e 94 83 00 	call	0x106	; 0x106 <SendString>
}
 1b2:	60 96       	adiw	r28, 0x10	; 16
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	cf 91       	pop	r28
 1c0:	df 91       	pop	r29
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	08 95       	ret

000001c8 <itoa>:
 1c8:	fb 01       	movw	r30, r22
 1ca:	9f 01       	movw	r18, r30
 1cc:	e8 94       	clt
 1ce:	42 30       	cpi	r20, 0x02	; 2
 1d0:	c4 f0       	brlt	.+48     	; 0x202 <itoa+0x3a>
 1d2:	45 32       	cpi	r20, 0x25	; 37
 1d4:	b4 f4       	brge	.+44     	; 0x202 <itoa+0x3a>
 1d6:	4a 30       	cpi	r20, 0x0A	; 10
 1d8:	29 f4       	brne	.+10     	; 0x1e4 <itoa+0x1c>
 1da:	97 fb       	bst	r25, 7
 1dc:	1e f4       	brtc	.+6      	; 0x1e4 <itoa+0x1c>
 1de:	90 95       	com	r25
 1e0:	81 95       	neg	r24
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	64 2f       	mov	r22, r20
 1e6:	77 27       	eor	r23, r23
 1e8:	0e 94 15 01 	call	0x22a	; 0x22a <__udivmodhi4>
 1ec:	80 5d       	subi	r24, 0xD0	; 208
 1ee:	8a 33       	cpi	r24, 0x3A	; 58
 1f0:	0c f0       	brlt	.+2      	; 0x1f4 <itoa+0x2c>
 1f2:	89 5d       	subi	r24, 0xD9	; 217
 1f4:	81 93       	st	Z+, r24
 1f6:	cb 01       	movw	r24, r22
 1f8:	00 97       	sbiw	r24, 0x00	; 0
 1fa:	a1 f7       	brne	.-24     	; 0x1e4 <itoa+0x1c>
 1fc:	16 f4       	brtc	.+4      	; 0x202 <itoa+0x3a>
 1fe:	5d e2       	ldi	r21, 0x2D	; 45
 200:	51 93       	st	Z+, r21
 202:	10 82       	st	Z, r1
 204:	c9 01       	movw	r24, r18
 206:	0c 94 05 01 	jmp	0x20a	; 0x20a <strrev>

0000020a <strrev>:
 20a:	dc 01       	movw	r26, r24
 20c:	fc 01       	movw	r30, r24
 20e:	67 2f       	mov	r22, r23
 210:	71 91       	ld	r23, Z+
 212:	77 23       	and	r23, r23
 214:	e1 f7       	brne	.-8      	; 0x20e <strrev+0x4>
 216:	32 97       	sbiw	r30, 0x02	; 2
 218:	04 c0       	rjmp	.+8      	; 0x222 <strrev+0x18>
 21a:	7c 91       	ld	r23, X
 21c:	6d 93       	st	X+, r22
 21e:	70 83       	st	Z, r23
 220:	62 91       	ld	r22, -Z
 222:	ae 17       	cp	r26, r30
 224:	bf 07       	cpc	r27, r31
 226:	c8 f3       	brcs	.-14     	; 0x21a <strrev+0x10>
 228:	08 95       	ret

0000022a <__udivmodhi4>:
 22a:	aa 1b       	sub	r26, r26
 22c:	bb 1b       	sub	r27, r27
 22e:	51 e1       	ldi	r21, 0x11	; 17
 230:	07 c0       	rjmp	.+14     	; 0x240 <__udivmodhi4_ep>

00000232 <__udivmodhi4_loop>:
 232:	aa 1f       	adc	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	a6 17       	cp	r26, r22
 238:	b7 07       	cpc	r27, r23
 23a:	10 f0       	brcs	.+4      	; 0x240 <__udivmodhi4_ep>
 23c:	a6 1b       	sub	r26, r22
 23e:	b7 0b       	sbc	r27, r23

00000240 <__udivmodhi4_ep>:
 240:	88 1f       	adc	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	5a 95       	dec	r21
 246:	a9 f7       	brne	.-22     	; 0x232 <__udivmodhi4_loop>
 248:	80 95       	com	r24
 24a:	90 95       	com	r25
 24c:	bc 01       	movw	r22, r24
 24e:	cd 01       	movw	r24, r26
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
